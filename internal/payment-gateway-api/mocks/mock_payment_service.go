// Code generated by MockGen. DO NOT EDIT.
// Source: PaymentGateway/internal/payment-gateway-api/services (interfaces: PaymentService)

// Package mocks is a generated GoMock package.
package mocks

import (
	callbackdtos "PaymentGateway/internal/payment-gateway-api/controllers/models/callback-dtos"
	depositdtos "PaymentGateway/internal/payment-gateway-api/controllers/models/deposit-dtos"
	withdrawdtos "PaymentGateway/internal/payment-gateway-api/controllers/models/withdraw-dtos"
	enums "PaymentGateway/internal/payment-gateway-api/enums"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPaymentService is a mock of PaymentService interface.
type MockPaymentService struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceMockRecorder
}

// MockPaymentServiceMockRecorder is the mock recorder for MockPaymentService.
type MockPaymentServiceMockRecorder struct {
	mock *MockPaymentService
}

// NewMockPaymentService creates a new mock instance.
func NewMockPaymentService(ctrl *gomock.Controller) *MockPaymentService {
	mock := &MockPaymentService{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentService) EXPECT() *MockPaymentServiceMockRecorder {
	return m.recorder
}

// Callback mocks base method.
func (m *MockPaymentService) Callback(arg0 enums.PaymentType, arg1 callbackdtos.CallbackRequest) (*callbackdtos.CallbackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Callback", arg0, arg1)
	ret0, _ := ret[0].(*callbackdtos.CallbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Callback indicates an expected call of Callback.
func (mr *MockPaymentServiceMockRecorder) Callback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Callback", reflect.TypeOf((*MockPaymentService)(nil).Callback), arg0, arg1)
}

// Deposit mocks base method.
func (m *MockPaymentService) Deposit(arg0 depositdtos.DepositRequest) (*depositdtos.DepositResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", arg0)
	ret0, _ := ret[0].(*depositdtos.DepositResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockPaymentServiceMockRecorder) Deposit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockPaymentService)(nil).Deposit), arg0)
}

// Withdraw mocks base method.
func (m *MockPaymentService) Withdraw(arg0 withdrawdtos.WithdrawRequest) (*withdrawdtos.WithdrawResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", arg0)
	ret0, _ := ret[0].(*withdrawdtos.WithdrawResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockPaymentServiceMockRecorder) Withdraw(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockPaymentService)(nil).Withdraw), arg0)
}
